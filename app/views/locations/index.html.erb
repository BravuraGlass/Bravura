<div class="panel panel-default">
  <div class="panel-body">
    <%= form_tag( locations_index_path, {id: 'form-map', class: 'form-inline', method: 'get'}) do -%>
    <fieldset>
      <div class="form-group col-md-2">
        <div class="checkbox c-checkbox">
          <label>
            <input class="bj-filter-map" type="checkbox" name="show_workers" id="show_workers" <%= "checked" if @show_workers %> />
            <span class="fa fa-check"></span><b>Show Workers</b>
          </label>
        </div>
      </div>
      <% if @workers %>
        <% @workers.each_with_index do |worker, id| %>
          <div class="form-group col-md-2">
            <div class="checkbox c-checkbox">
              <label>
                <input class="bj-filter-map-worker" value="<%= worker[1] %>" type="checkbox" name="show_worker[]" id="show_worker_<%= worker[1] %>"  <%= "checked" if params[:show_worker].present? && params[:show_worker].include?(worker[1].to_s) %> />
                <span class="fa fa-check"></span><a href="javascript:void(0)" onclick="$(this).parent().click()" style="text-decoration: none;" title="<%= worker[0] %>"><%= worker[0].truncate(17) %></a>
              </label>
            </div>
          </div>
        <% end %>
      <% end %>
      <div class="form-group col-md-2 left">
        <button class="btn btn-primary" type="submit" id='filter-button'>Filter</button>
      </div>  
    </fieldset>
    <% end -%>

    <div id="map" class="full-map">
      <div id="location-map"></div>
    </div>
  </div>
</div>

<script>
	// Loop through our array of markers & place each one on the map
  var markers = <%=raw @markers.to_json || '{}' %>;

  var user_id = '<%=raw current_user.id %>';

  console.log(markers);

  function initMaps() {
  	initMapWithMarkers(markers)
  }


  var gMapMarkers = [];
  var infoWindowList = [];
  var map = null;
  var socket = io("<%= GEORSERVER_ADDRESS %>", {query: {uid: user_id}});
  // var socket = io('http://localhost:8080', {query: {uid: user_id}});

  function initMapWithMarkers(markers) {
  
    var center = {
      lat: 40.6179997,
      lng: -73.9344151
    };

    map = new google.maps.Map(document.getElementById('location-map'), {
      zoom: 11,
      center: center
    });

    var trafficLayer = new google.maps.TrafficLayer();
    trafficLayer.setMap(map);

    gMapMarkers = [];
    infoWindowList = [];

    if(markers && markers.length > 0) {
      for( var i = 0; i < markers.length; i++ ) {
        var marker_data = markers[i];
        var created_at = marker_data.created_at;
        var updated_at = marker_data.updated_at;
        var content = marker_data.marker_title || '';
        var position = new google.maps.LatLng(marker_data.lat, marker_data.lng);
        if(marker_data.old == true){
          var color = "808080"
          var bgcolor = "fff"
        }else{
          var color = "ff0000"
          var bgcolor = "fff"
        }
        // please read: https://developers.google.com/chart/image/docs/gallery/dynamic_icons#icon_types
        icon = 'https://chart.googleapis.com/chart?chst=d_bubble_icon_text_small&chld=location|edge_bc|'+content+'  |'+color+'|'+bgcolor;
        var marker = new google.maps.Marker({
          position: position,
          map: map,
          icon: icon,
          title: updated_at
        });
        marker.setVisible(true);
        gMapMarkers.push(marker);

        console.log(marker_data.user_id + ": " + content);

        var infoWindow = new google.maps.InfoWindow( {
          content: updated_at
        });

        google.maps.event.addListener(marker,'click', (function(marker,updated_at,infoWindow){ 
            return function() {
              infoWindow.open(map,marker);
            };
        })(marker,updated_at,infoWindow)); 

        google.maps.event.addListener(marker,'mouseover', (function(marker,updated_at,infoWindow){ 
            return function() {
              infoWindow.open(map,marker);
            };
        })(marker,updated_at,infoWindow)); 

        google.maps.event.addListener(marker,'mouseout', (function(marker,updated_at,infoWindow){ 
            return function() {
              infoWindow.close();
            };
        })(marker,updated_at,infoWindow)); 

        console.log("Markers: ", markers);
        console.log("Real Markers: ", gMapMarkers);

        //infoWindowList.push(infoWindow);
      }
    }    

    socket.on('update_positions', updatePositions);
  }

  function updatePositions(positions) {
    
        console.log('---------updated positions -----------', positions);
    
        var index = 0;

        for(item in positions) {
        //positions.forEach((item, index) => {
          data = positions[item];

          var isExist = false;
          for(var i=0; i<markers.length; i++) {
            if(parseInt(markers[i].user_id) == parseInt(data.user_id)) {
    
              isExist = true;

              console.log('--------- data -----------', data);

              if (data.lat != markers[i].lat || data.lng != markers[i].lng) {
                markers[i].lat = data.lat;
                markers[i].lng = data.lng;
        
                var marker_data = markers[i];
                var position = new google.maps.LatLng(marker_data.lat, marker_data.lng);
                var content = marker_data.marker_title || '';
                var created_at = marker_data.created_at;
                var updated_at = marker_data.updated_at;
                var color = "ff0000";
                var bgcolor = "fff";
                icon = 'https://chart.googleapis.com/chart?chst=d_bubble_icon_text_small&chld=location|edge_bc|'+content+'  |'+color+'|'+bgcolor;
        
                var marker = gMapMarkers[i];
                marker.icon = icon
                marker.setPosition(position);
              }

              break;
            }
          }
          
          console.log('---------exist -----------', isExist);

          if(isExist != true) {
            var content = data.marker_title || '';
            // should change from socket
            var created_at = data.created_at || content;
            var updated_str = data.updated_at.trim();
            if( updated_str.indexOf(" ") !== -1 ){
              var date = updated_str.split(" ")[0];
              var time = updated_str.split(" ")[1];
              var updated_at_utc = new Date(date+"T"+time+"Z");
            }else{
              var updated_at_utc = updated_str;
            }
            var time_update = new Date(updated_at_utc);

            var updated_at = time_update.toLocaleString("en-us", { timeZone: "America/New_York", hour12: false, 
            year: "numeric", month: "long", day: "2-digit", hour: "2-digit", minute: "2-digit"})
            var position = new google.maps.LatLng(data.lat, data.lng);
            var color = "ff0000"
            var bgcolor = "fff"

            // please read: https://developers.google.com/chart/image/docs/gallery/dynamic_icons#icon_types
            icon = 'https://chart.googleapis.com/chart?chst=d_bubble_icon_text_small&chld=location|edge_bc|'+content+'  |'+color+'|'+bgcolor;
            var marker = new google.maps.Marker({
              position: position,
              map: map,
              icon: icon,
              title: updated_at
            });
  
            marker.setVisible(true);
            gMapMarkers.push(marker);

            markers.push({
              user_id: data.user_id,
              lat: data.lat,
              lng: data.lng,
              marker_title: updated_at
            });

            var infoWindow = new google.maps.InfoWindow( {
              content: updated_at
            });

            console.log(data.user_id + ": " + updated_at);
    
            google.maps.event.addListener(marker,'click', (function(marker,updated_at,infoWindow){ 
                return function() {
                  infoWindow.open(map,marker);
                };
            })(marker,updated_at,infoWindow)); 

            google.maps.event.addListener(marker,'mouseover', (function(marker,updated_at,infoWindow){ 
              return function() {
                infoWindow.open(map,marker);
              };
            })(marker,updated_at,infoWindow)); 

            google.maps.event.addListener(marker,'mouseout', (function(marker,updated_at,infoWindow){ 
                return function() {
                  infoWindow.close();
                };
            })(marker,updated_at,infoWindow)); 

          }
          index = index+1;
        }

        /*
        markers.forEach((item, index) => {
          var data = positions[item.user_id];
          if (data.lat != item.lat || data.lng != item.lng) {
            markers[index].lat = data.lat;
            markers[index].lng = data.lng;
    
            var marker_data = markers[index];
            var position = new google.maps.LatLng(marker_data.lat, marker_data.lng);
            var content = marker_data.title || '';
    
            var marker = gMapMarkers[index]
    
            marker.setPosition(position);
          }
        });
        */
  }

  function filterData() {
    for(var i=markers.length - 1; i>=0; i--) {
      if(isExist(markers[i].user_id)) {
        markers.splice(i, 1);
        gMapMarkers.splice(i, 1);
      }
    }
  }

  function isExist(user_id) {
    for(var i=0; i<markers.length; i++) {
      if(parseInt(markers[i].user_id) == parseInt(user_id)) {
        return true;
      }
    }

    return false;
  }
</script>