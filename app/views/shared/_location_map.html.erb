<div class="<%= 'hide' if (hidemap)%>">
  <div id="location-map"></div>
  <div id="infowindow-content">
    <span id="place-title" class="title"></span><br>
    <span id="place-subtitle"></span><br>
    <span id="place-detail"></span>
    <span id="place-detail"></span>
  </div>
</div>

<script>

var markers = <%=raw @markers.to_json || '{}' %>;
var user_id = '<%=raw current_user.id %>';
var gMapMarkers = [];
var infoWindowList = [];
var map = null;
var socket = io("<%= GEORSERVER_ADDRESS %>",{query: {uid: user_id}});
// var socket = io('http://localhost:8080', {query: {uid: user_id}});

function initMaps() {
   var addrField = document.getElementById('address');
   var field_id = "<%= address_field_id %>";
   // console.log(field_id);

    if (addrField || field_id == "address"){
      initMapaddress();
    };

   var custField = document.getElementById('customer_address');
    if (custField){
      initMapcustomer_address();
    };
}

function initMap<%= address_field_id ? address_field_id : '' %>() {
  var geocoder = new google.maps.Geocoder;
  var map = new google.maps.Map(document.getElementById('location-map'), {
    zoom: 11,
    center: {
      lat: 40.6179997,
      lng: -73.9344151
    }
  });
  // var gMapMarkers = [];
  var trafficLayer = new google.maps.TrafficLayer();
  trafficLayer.setMap(map);

  <% address_field_id = address_field_id || "address" %>
  var addressField = document.getElementById('<%= address_field_id %>');
  var latitudeField = document.getElementById('latitude');
  var longitudeField = document.getElementById('longitude');

  // if the address field is available, it means
  if (addressField){

    var geocoder = new google.maps.Geocoder;

    var options = {
      componentRestrictions: { country: 'us' }
    };

    var autocomplete = new google.maps.places.Autocomplete(
      addressField, options);
    autocomplete.bindTo('bounds', map);

    //map.controls[google.maps.ControlPosition.TOP_LEFT].push(addressField);

    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    var marker = new google.maps.Marker({
      map: map
    });
    marker.addListener('click', function () {
      infowindow.open(map, marker);
    });

    //add autocomplete listener
    autocomplete.addListener('place_changed', function () {
      infowindow.close();
      var place = autocomplete.getPlace();

      if (!place.place_id) {
        return;
      }
      geocoder.geocode({
        'placeId': place.place_id
      }, function (results, status) {

        if (status !== 'OK') {
          window.alert('Geocoder failed due to: ' + status);
          return;
        }
        map.setZoom(11);
        map.setCenter(results[0].geometry.location);
        // Set the position of the marker using the place ID and location.
        marker.setPlace({
          placeId: place.place_id,
          location: results[0].geometry.location
        });
        marker.setVisible(true);
        infowindowContent.children['place-title'].textContent = place.name;
        infowindowContent.children['place-subtitle'].textContent = place.place_id;
        infowindowContent.children['place-detail'].textContent =
          results[0].formatted_address;

        addressField.value = results[0].formatted_address;
        if (latitudeField && longitudeField){
          latitudeField.value = marker.place.location.lat();
          longitudeField.value = marker.place.location.lng();
        }
        infowindow.open(map, marker);
      });
    });

  }

  // Loop through our array of markers & place each one on the map
  var iconBase = '/assets/mapicons/';
  var icons = {
    job: {
      icon: iconBase + 'job.png'
    },
    task: {
      icon: iconBase + 'task.png'
    },
    confirmed_appointment: {
      icon: iconBase + 'confirmed_appointment.png'
    },
    worker: {
      icon: iconBase + 'worker.png'
    }
  };

  if(markers && markers.length > 0) {
    // gMapMarkers = []
    var infoWindowTask = new google.maps.InfoWindow();
    for( var i = 0; i < markers.length; i++ ) {
      var marker_data = markers[i];

      if(marker_data.type){

        var content = marker_data.marker_title || '';
        var updated_at = marker_data.updated_at_text;

        var position = new google.maps.LatLng(marker_data.lat, marker_data.lng);

        if(marker_data.type == "worker"){
          var markerLabel = marker_data.marker_title.split('-');

          if(markerLabel[1] == 'true'){
            var color = "808080"
            var color2 = "white"
          }else{
            var color = "ff0000"
            var color2 = "red"
          }

          if(marker_data.updated_at){
            var timeago = window.timeago().format(marker_data.updated_at)
          }else{
            var timeago = ''
          }
          var icon = "http://www.1x1px.me/FFFFFF-0.1.png"
          var content = markerLabel[0]
        }else{
          var icon = icons[marker_data.type].icon
          var content = marker_data.marker_title || '';
        }

        var marker = new google.maps.Marker({
          icon: icon,
          position: position,
          map: map,
          id: marker_data.user_id,
          color: color2
        });
        marker.setVisible(true);
        if(marker_data.type == "worker"){
          gMapMarkers.push(marker);
        }
        
        if(marker_data.user_id){
          var infoWindow = new google.maps.InfoWindow( {
            id: marker_data.user_id,
            content: "<div id='"+marker_data.user_id+"' class='google-popup'><b>"+markerLabel[0]+"</b><br/><small style='float:right'>"+timeago+"</small></div>",
            color: color2
          });

          google.maps.event.addListener(infoWindow,'domready',function(){ 
            if(this.id){
              color2 = this.color;
              var gm_iw = $('#'+this.id).parent().parent().parent();
              $('#'+this.id).addClass(this.color)
              gm_iw.prev('div').addClass(this.color)
              gm_iw.prev('div').children().eq(3).addClass(this.color)
              gm_iw.prev('div').children().eq(2).children().each(function(e){
                $(this).children().addClass(color2)
              })
              gm_iw.addClass(this.color);
              console.log(this.id, this.color, $('#'+this.id).attr('id'))
            }
          });

          console.log(marker_data.user_id + ": " + marker_data.marker_title, markerLabel[1]);
        }else{
          var infoWindow = new google.maps.InfoWindow( {
            content: content
          });
        }

        google.maps.event.addListener(marker,'click', (function(marker,updated_at,infoWindow){ 
          if(marker_data.user_id&& infoWindow&& infoWindow.id){infoWindow.open(map,marker)}
          return function() {
            infoWindow.open(map,marker);
          };
        })(marker,updated_at,infoWindow)); 

        google.maps.event.addListener(marker,'mouseover', (function(marker,content,infoWindow){ 
          if(marker_data.user_id&& infoWindow&& infoWindow.id){infoWindow.open(map,marker)}
          return function() {
            infoWindow.open(map,marker);
          };
        })(marker,content,infoWindow)); 

        google.maps.event.addListener(marker,'mouseout', (function(marker,content,infoWindow){ 
          if(marker_data.user_id&& infoWindow&& infoWindow.id){infoWindow.open(map,marker)}
          return function() {
            infoWindow.close();
          };
        })(marker,content,infoWindow)); 

        
      }
    }
  }

  socket.on('update_positions', updatePositions);
}

function isUserId(data,user_id) { 
    return data.user_id === user_id;
}
function geocodeAddress(geocoder, map) {
  geocoder.geocode({
    componentRestrictions: {
      country: 'US',
      postalCode: '11234'
    }
  }, function (results, status) {
    if (status === 'OK') {
      map.setCenter(results[0].geometry.location);
      new google.maps.Marker({
        map: map,
        position: results[0].geometry.location
      });

    } else {
      window.alert('We were not able to geocode the address: ' +
        status);
    }
  });
}

function updatePositions(positions) {
  console.log('---------updated positions -----------', positions);

  var index = 0;
  for(item in positions) {
  //positions.forEach((item, index) => {
    data = positions[item];


    var isExist = false;
    for(var i=0; i<markers.length; i++) {
      var marker_data = markers[i];
      if(parseInt(markers[i].user_id) == parseInt(data.user_id)) {

        isExist = true;

        if (data && data.lat != markers[i].lat || data.lng != markers[i].lng) {
          markers[i].lat = data.lat;
          markers[i].lng = data.lng;
  
          var position = new google.maps.LatLng(marker_data.lat, marker_data.lng);
          var content = marker_data.marker_title|| '';
          var markerLabel = content.split('-');
          var created_at = marker_data.created_at;
          var updated_at = marker_data.updated_at;
          if(marker_data.updated_at){
            var timeago = window.timeago().format(marker_data.updated_at)
          }else{
            var timeago = ''
          }

          var color = "ff0000";
          var bgcolor = "fff";
          var color2 = 'red'
          icon = 'https://chart.googleapis.com/chart?chst=d_bubble_texts_big&chld=edge_bc|'+color+'|'+bgcolor+'| |'+markerLabel[0]+'|'+timeago
          icon = "http://www.1x1px.me/FFFFFF-0.1.png"
          var ii = gMapMarkers.findIndex( function(m) {
            return data.user_id == m.id
          });
          var marker = gMapMarkers[ii];
          if(data.user_id == 2) { console.log(ii)};
          if(marker){
            marker.icon = icon
            marker.setPosition(position);
          }
        }

        break;
      }
    }
    
    // console.log('---------exist -----------', isExist);

    if(isExist != true) {
      var content = data.marker_title || '';
      // should change from socket
      var created_at = data.created_at || content;
      var updated_str = data.updated_at.trim();
      if( updated_str.indexOf(" ") !== -1 ){
        var date = updated_str.split(" ")[0];
        var time = updated_str.split(" ")[1];
        var updated_at_utc = new Date(date+"T"+time+"Z");
      }else{
        var updated_at_utc = updated_str;
      }
      var time_update = new Date(updated_at_utc);

      var updated_at = time_update.toLocaleString("en-us", { timeZone: "America/New_York", hour12: false, 
      year: "numeric", month: "long", day: "2-digit", hour: "2-digit", minute: "2-digit"})

      if(marker_data.updated_at){
        var timeago = window.timeago().format(marker_data.updated_at)
      }else{
        var timeago = ''
      }
      var position = new google.maps.LatLng(data.lat, data.lng);
      var color = "ff0000"
      var bgcolor = "fff"
      var color2 = "red"

      // please read: https://developers.google.com/chart/image/docs/gallery/dynamic_icons#icon_types
      icon = 'https://chart.googleapis.com/chart?chst=d_bubble_icon_text_small&chld=location|edge_bc|'+content+'  |'+color+'|'+bgcolor;
      var icon = "http://www.1x1px.me/FFFFFF-0.1.png"
      
      var marker = new google.maps.Marker({
        icon: icon,
        position: position,
        map: map,
        id: data.user_id,
        color: color2
      });

      marker.setVisible(true);
      if(data.user_id){
        gMapMarkers.push(marker);
      }


      markers.push({
        user_id: data.user_id,
        lat: data.lat,
        lng: data.lng,
        marker_title: content,
        id: data.user_id,
        color: color2
      });


      if(data.user_id){
        var infoWindow = new google.maps.InfoWindow( {
          id: data.user_id,
          content: "<div id='"+data.user_id+"' class='google-popup'><b>"+content+"</b><br/><small style='float:right'>"+timeago+"</small></div>",
          color: color2
        });

        google.maps.event.addListener(infoWindow,'domready',function(){ 
          if(this.id){
            color2 = this.color;
            var gm_iw = $('#'+this.id).parent().parent().parent();
            $('#'+this.id).addClass(this.color)
            gm_iw.prev('div').addClass(this.color)
            gm_iw.prev('div').children().eq(3).addClass(this.color)
            gm_iw.prev('div').children().eq(2).children().each(function(e){
              $(this).children().addClass(color2)
            })
            gm_iw.addClass(this.color);
            console.log(this.id, this.color, $('#'+this.id).attr('id'))
          }
        });

        console.log(data.user_id + ": " + data.marker_title, markerLabel[1]);
      }else{
        var infoWindow = new google.maps.InfoWindow( {
          content: updated_at
        });
      }

      // console.log(data.user_id + ": " + updated_at);

      google.maps.event.addListener(marker,'click', (function(marker,updated_at,infoWindow){ 
        if(data.user_id&& infoWindow&& infoWindow.id){infoWindow.open(map,marker)}
          return function() {
            infoWindow.open(map,marker);
          };
      })(marker,updated_at,infoWindow)); 

      google.maps.event.addListener(marker,'mouseover', (function(marker,updated_at,infoWindow){ 
        if(data.user_id&& infoWindow&& infoWindow.id){infoWindow.open(map,marker)}
        return function() {
          infoWindow.open(map,marker);
        };
      })(marker,updated_at,infoWindow)); 

      google.maps.event.addListener(marker,'mouseout', (function(marker,updated_at,infoWindow){ 
        if(data.user_id&& infoWindow&& infoWindow.id){infoWindow.open(map,marker)}
          return function() {
            infoWindow.close();
          };
      })(marker,updated_at,infoWindow)); 

    }
    index = index+1;
  }
}

var BRAVURA = BRAVURA || {};

BRAVURA.showLocationMap = function showLocationMap() {
  $('#location_map, #address').toggleClass('hide');
  $('#address').val('');
  $('#latitude').val('');
  $('#longitude').val('');
};

</script>
